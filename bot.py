import os, time, base64, sqlite3, traceback
from io import BytesIO
from datetime import datetime, timezone
from typing import Optional, Tuple

from telegram import (
    Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup,
    InlineKeyboardButton, InputFile
)
from telegram.constants import ChatAction
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters
)

from openai import OpenAI, BadRequestError, APIStatusError, PermissionDeniedError

# ========= ENV =========
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "")
OPENAI_API_KEY     = os.getenv("OPENAI_API_KEY", "")
TEXT_PREFS = [
    os.getenv("OPENAI_TEXT_PRIMARY","gpt-5").strip(),
    "gpt-5-mini", "gpt-4o", "gpt-4.1-mini", "gpt-4o-mini"
]
IMAGE_PREFS = [
    os.getenv("OPENAI_IMAGE_PRIMARY","dall-e-3").strip(),
    "gpt-image-1"
]
OPENAI_TTS_VOICE = os.getenv("OPENAI_TTS_VOICE", "alloy")
OPENAI_TIMEOUT_S = float(os.getenv("OPENAI_TIMEOUT_S", "60"))

PAYMENT_URL_STANDARD = os.getenv("PAYMENT_URL_STANDARD", "https://example.com/pay-standard")
PAYMENT_URL_PREMIUM  = os.getenv("PAYMENT_URL_PREMIUM",  "https://example.com/pay-premium")
ADMIN_ID             = os.getenv("ADMIN_ID","")

FREE_DAILY_TEXT   = int(os.getenv("FREE_DAILY_LIMIT", "15"))
FREE_DAILY_IMAGE  = int(os.getenv("FREE_DAILY_IMAGE", "3"))
STANDARD_IMG_MONTH = int(os.getenv("STANDARD_IMG_MONTHLY", "20"))

PLAN_FREE, PLAN_STANDARD, PLAN_PREMIUM = "free", "standard", "premium"

# ========= OPENAI =========
def _client():
    return OpenAI(api_key=OPENAI_API_KEY)

# ========= DB (SQLite ‚Äî –ø—Ä–æ—Å—Ç–æ –∏ –Ω–∞–¥—ë–∂–Ω–æ; –Ω–∞ Render –ø–æ–¥–æ–π–¥—ë—Ç) =========
DB_PATH = os.getenv("DB_PATH", "bot.db")

class DB:
    def __init__(self, path:str):
        self.db = sqlite3.connect(path, check_same_thread=False)
        self.db.execute("PRAGMA journal_mode=WAL;")
        self.ensure()

    def ensure(self):
        c=self.db.cursor()
        c.execute("""CREATE TABLE IF NOT EXISTS plans(
            chat_id INTEGER PRIMARY KEY, plan TEXT, expires_at REAL
        )""")
        c.execute("""CREATE TABLE IF NOT EXISTS usage_daily(
            chat_id INTEGER, ymd TEXT, text_cnt INTEGER DEFAULT 0, img_cnt INTEGER DEFAULT 0,
            PRIMARY KEY(chat_id, ymd)
        )""")
        c.execute("""CREATE TABLE IF NOT EXISTS usage_img_month(
            chat_id INTEGER, ym TEXT, cnt INTEGER DEFAULT 0,
            PRIMARY KEY(chat_id, ym)
        )""")
        c.execute("""CREATE TABLE IF NOT EXISTS history(
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            chat_id INTEGER, ts REAL, kind TEXT, prompt TEXT, response TEXT
        )""")
        c.execute("""CREATE TABLE IF NOT EXISTS settings(
            chat_id INTEGER PRIMARY KEY,
            voice_reply INTEGER DEFAULT 0,
            auto_mode  INTEGER DEFAULT 1
        )""")
        c.execute("""CREATE TABLE IF NOT EXISTS redeem_codes(
            code TEXT PRIMARY KEY, plan TEXT, days INTEGER, used INTEGER DEFAULT 0
        )""")
        self.db.commit()

    def exec(self, q, p=()):
        self.db.execute(q,p); self.db.commit()
    def one(self, q, p=()):
        cur=self.db.execute(q,p); return cur.fetchone()
    def all(self, q, p=()):
        cur=self.db.execute(q,p); return cur.fetchall()

DBI=DB(DB_PATH)

# ========= Plans / Usage =========
def _now(): return time.time()
def _ymd(): return datetime.now(timezone.utc).strftime("%Y-%m-%d")
def _ym():  return datetime.now(timezone.utc).strftime("%Y-%m")

def get_plan(chat_id:int)->Tuple[str, Optional[float]]:
    row=DBI.one("SELECT plan, expires_at FROM plans WHERE chat_id=?", (chat_id,))
    if not row: return PLAN_FREE, None
    plan, exp=row
    if exp and exp<_now(): return PLAN_FREE, None
    return plan or PLAN_FREE, exp

def set_plan(chat_id:int, plan:str, days:int):
    exp = _now()+days*86400 if days and plan!=PLAN_FREE else None
    DBI.exec("INSERT INTO plans(chat_id,plan,expires_at) VALUES(?,?,?) "
             "ON CONFLICT(chat_id) DO UPDATE SET plan=excluded.plan, expires_at=excluded.expires_at",
             (chat_id, plan, exp))

def inc_text_usage(chat_id:int):
    DBI.exec("INSERT INTO usage_daily(chat_id,ymd,text_cnt,img_cnt) VALUES(?,?,1,0) "
             "ON CONFLICT(chat_id,ymd) DO UPDATE SET text_cnt=text_cnt+1", (chat_id,_ymd()))

def inc_img_usage_free(chat_id:int):
    DBI.exec("INSERT INTO usage_daily(chat_id,ymd,text_cnt,img_cnt) VALUES(?,?,0,1) "
             "ON CONFLICT(chat_id,ymd) DO UPDATE SET img_cnt=img_cnt+1", (chat_id,_ymd()))

def inc_img_usage_std(chat_id:int):
    DBI.exec("INSERT INTO usage_img_month(chat_id,ym,cnt) VALUES(?,?,1) "
             "ON CONFLICT(chat_id,ym) DO UPDATE SET cnt=cnt+1", (chat_id,_ym()))

def get_text_usage_today(chat_id:int)->int:
    row=DBI.one("SELECT text_cnt FROM usage_daily WHERE chat_id=? AND ymd=?", (chat_id,_ymd()))
    return int(row[0]) if row else 0

def get_img_usage_today_free(chat_id:int)->int:
    row=DBI.one("SELECT img_cnt FROM usage_daily WHERE chat_id=? AND ymd=?", (chat_id,_ymd()))
    return int(row[0]) if row else 0

def get_img_usage_month_std(chat_id:int)->int:
    row=DBI.one("SELECT cnt FROM usage_img_month WHERE chat_id=? AND ym=?", (chat_id,_ym()))
    return int(row[0]) if row else 0

def get_voice_reply(chat_id:int)->bool:
    row=DBI.one("SELECT voice_reply FROM settings WHERE chat_id=?", (chat_id,))
    return bool(row and row[0])

def set_voice_reply(chat_id:int, val:bool):
    DBI.exec("INSERT INTO settings(chat_id,voice_reply) VALUES(?,?) "
             "ON CONFLICT(chat_id) DO UPDATE SET voice_reply=excluded.voice_reply", (chat_id, 1 if val else 0))

def get_auto_mode(chat_id:int)->bool:
    row = DBI.one("SELECT auto_mode FROM settings WHERE chat_id=?", (chat_id,))
    # –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ—Ç ‚Äî —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –∞–≤—Ç–æ-—Ä–µ–∂–∏–º –í–ö–õ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if row is None:
        return True
    try:
        return bool(int(row[0]) != 0)
    except Exception:
        return True

def set_auto_mode(chat_id:int, val:bool):
    DBI.exec("INSERT INTO settings(chat_id,auto_mode) VALUES(?,?) "
             "ON CONFLICT(chat_id) DO UPDATE SET auto_mode=excluded.auto_mode", (chat_id, 1 if val else 0))

def add_history(chat_id:int, kind:str, prompt:str, response:str):
    DBI.exec("INSERT INTO history(chat_id,ts,kind,prompt,response) VALUES(?,?,?,?,?)",
             (chat_id,_now(),kind,prompt,response))

def last_history(chat_id:int, n:int=5):
    return DBI.all("SELECT ts,kind,prompt,response FROM history WHERE chat_id=? ORDER BY ts DESC LIMIT ?",
                   (chat_id, n))

# ========= UI =========
BTN_CHAT="üí¨ –ë–æ–ª—Ç–∞–ª–∫–∞"
BTN_IMG="üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–æ—Ç–æ"
BTN_VOICE="üé§ –ì–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç"
BTN_HIST="üìú –ú–æ—è –∏—Å—Ç–æ—Ä–∏—è"
BTN_TARIFF="üí≥ –¢–∞—Ä–∏—Ñ—ã"
BTN_HELP="‚Ñπ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"

KB = ReplyKeyboardMarkup(
    [[KeyboardButton(BTN_CHAT), KeyboardButton(BTN_IMG)],
     [KeyboardButton(BTN_VOICE), KeyboardButton(BTN_HIST)],
     [KeyboardButton(BTN_TARIFF), KeyboardButton(BTN_HELP)]],
    resize_keyboard=True
)

HELP_TEXT=(
"üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –ø–æ–±–æ–ª—Ç–∞—Ç—å, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å.\n\n"
"–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n"
"‚Ä¢ üí¨ –ë–æ–ª—Ç–∞–ª–∫–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å—ã.\n"
"‚Ä¢ üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–æ—Ç–æ ‚Äî –æ–ø–∏—à–∏ –∏–¥–µ—é –∫–∞—Ä—Ç–∏–Ω–∫–∏ (–±–µ–∑ –¥–æ–ø.–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤).\n"
"‚Ä¢ üé§ –ì–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç ‚Äî –æ—Ç–ø—Ä–∞–≤—å voice: —è —Ä–∞—Å–ø–æ–∑–Ω–∞—é –∏ –æ—Ç–≤–µ—á—É. –•–æ—á–µ—à—å ‚Äî –≤–∫–ª—é—á—É –æ—Ç–≤–µ—Ç –≥–æ–ª–æ—Å–æ–º.\n"
"‚Ä¢ üìú –ú–æ—è –∏—Å—Ç–æ—Ä–∏—è ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø—Ä–æ—Å–æ–≤.\n\n"
"–¢–∞—Ä–∏—Ñ—ã:\n"
"üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω–æ ‚Äî 15 —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö / 3 –∫–∞—Ä—Ç–∏–Ω–∫–∏ –≤ –¥–µ–Ω—å.\n"
"üíº –°—Ç–∞–Ω–¥–∞—Ä—Ç ‚Äî 200‚ÇΩ/–º–µ—Å (20 –∫–∞—Ä—Ç–∏–Ω–æ–∫/–º–µ—Å, —Ç–µ–∫—Å—Ç –±–µ–∑ –ª–∏–º–∏—Ç–∞).\n"
"üëë –ü—Ä–µ–º–∏—É–º ‚Äî 500‚ÇΩ/–º–µ—Å (–≤—Å—ë –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π).\n"
"–ü–ª–∞—Ç–Ω—ã–µ –ø–ª–∞–Ω—ã –∞–∫—Ç–∏–≤–∏—Ä—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–æ–¥–æ–º: /redeem –ö–û–î\n"
)

PRICING_TEXT=(
"üí≥ –¢–∞—Ä–∏—Ñ—ã\n\n"
"üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π ‚Äî 15 —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö / 3 –∫–∞—Ä—Ç–∏–Ω–∫–∏ –≤ –¥–µ–Ω—å.\n"
"üíº –°—Ç–∞–Ω–¥–∞—Ä—Ç ‚Äî 200‚ÇΩ/–º–µ—Å, 20 –∫–∞—Ä—Ç–∏–Ω–æ–∫/–º–µ—Å.\n"
"üëë –ü—Ä–µ–º–∏—É–º ‚Äî 500‚ÇΩ/–º–µ—Å, –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.\n\n"
"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–ª—É—á–∏—à—å –∫–æ–¥ –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—à—å: /redeem –ö–û–î"
)

# ========= Intent =========
def detect_intent(text:str)->str:
    t=(text or "").lower()
    markers=[
        "—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π","—Å–æ–∑–¥–∞–π –∫–∞—Ä—Ç–∏–Ω–∫—É","—Å–æ–∑–¥–∞–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ","—Å–¥–µ–ª–∞–π –∫–∞—Ä—Ç–∏–Ω–∫—É","—Å–¥–µ–ª–∞–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
        "–Ω–∞—Ä–∏—Å—É–π","–∏–∑–æ–±—Ä–∞–∑–∏","–ø–æ—Å—Ç–µ—Ä","–ª–æ–≥–æ—Ç–∏–ø","–æ–±–ª–æ–∂–∫—É","–∞—Ä—Ç","–∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—é","–±–∞–Ω–Ω–µ—Ä","–≤–∏–∑—É–∞–ª",
        "make an image","generate an image","create an image","draw","poster","logo","artwork","illustration",
    ]
    return "image" if any(k in t for k in markers) else "chat"

# ========= Access checks =========
def allow_text(chat_id:int)->Tuple[bool,str]:
    plan,_=get_plan(chat_id)
    if plan==PLAN_FREE:
        used=get_text_usage_today(chat_id)
        if used>=FREE_DAILY_TEXT:
            return False,"‚ùå –õ–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏—Å—á–µ—Ä–ø–∞–Ω. –û—Ñ–æ—Ä–º–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –≤ –º–µ–Ω—é ¬´üí≥ –¢–∞—Ä–∏—Ñ—ã¬ª."
    return True,""

def allow_image(chat_id:int)->Tuple[bool,str,str]:
    plan,_=get_plan(chat_id)
    if plan==PLAN_FREE:
        used=get_img_usage_today_free(chat_id)
        if used>=FREE_DAILY_IMAGE:
            return False,"‚ùå –õ–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∫–∞—Ä—Ç–∏–Ω–æ–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏—Å—á–µ—Ä–ø–∞–Ω. –û—Ñ–æ—Ä–º–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –≤ –º–µ–Ω—é ¬´üí≥ –¢–∞—Ä–∏—Ñ—ã¬ª.",PLAN_FREE
        return True,"",PLAN_FREE
    if plan==PLAN_STANDARD:
        used=get_img_usage_month_std(chat_id)
        if used>=STANDARD_IMG_MONTH:
            return False,"‚ùå –õ–∏–º–∏—Ç –∫–∞—Ä—Ç–∏–Ω–æ–∫ –ø–æ ¬´–°—Ç–∞–Ω–¥–∞—Ä—Ç¬ª –∏—Å—á–µ—Ä–ø–∞–Ω –∑–∞ –º–µ—Å—è—Ü. –û–±–Ω–æ–≤–∏—Ç–µ —Ç–∞—Ä–∏—Ñ.",PLAN_STANDARD
        return True,"",PLAN_STANDARD
    return True,"",PLAN_PREMIUM

# ========= Core: text / image / voice =========
async def handle_chat(update:Update, context:ContextTypes.DEFAULT_TYPE, text:str):
    chat_id=update.effective_chat.id
    ok,warn=allow_text(chat_id)
    if not ok:
        await update.message.reply_text(warn, reply_markup=KB); return
    await context.bot.send_chat_action(chat_id, ChatAction.TYPING)
    msgs=[{"role":"system","content":"–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –∫—Ä–∞—Ç–∫–∏–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫."},
          {"role":"user","content":text}]
    client=_client()
    out=None
    for model in TEXT_PREFS:
        try:
            r=client.chat.completions.create(model=model, messages=msgs, temperature=0.6, timeout=OPENAI_TIMEOUT_S)
            out=(r.choices[0].message.content or "").strip()
            if out: break
        except Exception:
            continue
    if not out:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=KB); return

    if get_plan(chat_id)[0]==PLAN_FREE: inc_text_usage(chat_id)
    add_history(chat_id,"text",text,out)
    await update.message.reply_text(out, reply_markup=KB)

    # –ø—Ä–∏ –≤–∫–ª—é—á—ë–Ω–Ω–æ–º –≥–æ–ª–æ—Å–æ–≤–æ–º –æ—Ç–≤–µ—Ç–µ ‚Äî –æ–∑–≤—É—á–∏–º
    if get_voice_reply(chat_id):
        try:
            path = await synth_tts(out, chat_id)
            await context.bot.send_audio(chat_id, audio=InputFile(path, filename="reply.mp3"))
        except Exception:
            pass


async def handle_image(update:Update, context:ContextTypes.DEFAULT_TYPE, text:str):
    chat_id = update.effective_chat.id
    ok, warn, plan = allow_image(chat_id)
    if not ok:
        await update.message.reply_text(warn, reply_markup=KB); return

    await context.bot.send_chat_action(chat_id, ChatAction.UPLOAD_PHOTO)
    client = _client()
    prompt = text.strip()

    errors = []
    img_b = None

    # –Ø–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: 1024x1024, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ.
    # –ï—Å–ª–∏ –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –µ—Å—Ç—å OPENAI_IMAGE_PRIMARY ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ.
    prefs = []
    try:
        from os import getenv
        p = (getenv("OPENAI_IMAGE_PRIMARY","") or "").strip()
        if p: prefs.append(p)
    except Exception:
        pass
    from itertools import chain
    prefs = list(dict.fromkeys(chain(prefs, IMAGE_PREFS)))  # —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫

    for m in prefs:
        try:
            kwargs = {"model": m, "prompt": prompt, "size": "1024x1024"}
            if (m or "").lower() == "dall-e-3":
                kwargs["quality"] = "standard"
            print(f"[IMG] try model={m} prompt={prompt[:80]!r}")
            gen = client.images.generate(**kwargs)
            b64 = gen.data[0].b64_json
            img_b = base64.b64decode(b64)
            print(f"[IMG] success model={m}")
            break
        except Exception as e:
            msg = f"{type(e).__name__}: {e}"
            print(f"[IMG-ERR] model={m} -> {msg}")
            errors.append((m, msg))
            continue

    if not img_b:
        human = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."
        if errors:
            _m, _e = errors[0]
            _e = str(_e)
            if len(_e) > 280:
                _e = _e[:280] + "‚Ä¶"
            human += f"
–ü—Ä–∏—á–∏–Ω–∞ ({_m}): {_e}
"
            human += "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø –∫ image‚Äë–º–æ–¥–µ–ª—è–º –≤ OpenAI (billing/verification)."
        await update.message.reply_text(human, reply_markup=KB)
        return app


async def cmd_imgtest(update, context):
    # –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
    await handle_image(update, context, "a cute orange cat sticker, simple and clean")

